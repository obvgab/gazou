// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
import HTTPTypes
extension APIProtocol {
    /// Registers each operation handler with the provided transport.
    /// - Parameters:
    ///   - transport: A transport to which to register the operation handlers.
    ///   - serverURL: A URL used to determine the path prefix for registered
    ///   request handlers.
    ///   - configuration: A set of configuration values for the server.
    ///   - middlewares: A list of middlewares to call before the handler.
    internal func registerHandlers(
        on transport: any ServerTransport,
        serverURL: Foundation.URL = .defaultOpenAPIServerURL,
        configuration: Configuration = .init(),
        middlewares: [any ServerMiddleware] = []
    ) throws {
        let server = UniversalServer(
            serverURL: serverURL,
            handler: self,
            configuration: configuration,
            middlewares: middlewares
        )
        try transport.register(
            {
                try await server.getApiVersion(
                    request: $0,
                    body: $1,
                    metadata: $2
                )
            },
            method: .get,
            path: server.apiPathComponentsWithServerPrefix("//")
        )
        try transport.register(
            {
                try await server.getManifest(
                    request: $0,
                    body: $1,
                    metadata: $2
                )
            },
            method: .get,
            path: server.apiPathComponentsWithServerPrefix("/{repository}/manifests/{reference}")
        )
        try transport.register(
            {
                try await server.existsImage(
                    request: $0,
                    body: $1,
                    metadata: $2
                )
            },
            method: .head,
            path: server.apiPathComponentsWithServerPrefix("/{repository}/manifests/{reference}")
        )
        try transport.register(
            {
                try await server.getBlob(
                    request: $0,
                    body: $1,
                    metadata: $2
                )
            },
            method: .get,
            path: server.apiPathComponentsWithServerPrefix("/{repository}/blobs/{digest}")
        )
        try transport.register(
            {
                try await server.existsBlob(
                    request: $0,
                    body: $1,
                    metadata: $2
                )
            },
            method: .head,
            path: server.apiPathComponentsWithServerPrefix("/{repository}/blobs/{digest}")
        )
    }
}

fileprivate extension UniversalServer where APIHandler: APIProtocol {
    /// API version check
    ///
    /// - Remark: HTTP `GET //`.
    /// - Remark: Generated from `#/paths////get(getApiVersion)`.
    func getApiVersion(
        request: HTTPTypes.HTTPRequest,
        body: OpenAPIRuntime.HTTPBody?,
        metadata: OpenAPIRuntime.ServerRequestMetadata
    ) async throws -> (HTTPTypes.HTTPResponse, OpenAPIRuntime.HTTPBody?) {
        try await handle(
            request: request,
            requestBody: body,
            metadata: metadata,
            forOperation: Operations.getApiVersion.id,
            using: {
                APIHandler.getApiVersion($0)
            },
            deserializer: { request, requestBody, metadata in
                let headers: Operations.getApiVersion.Input.Headers = .init(accept: try converter.extractAcceptHeaderIfPresent(in: request.headerFields))
                return Operations.getApiVersion.Input(headers: headers)
            },
            serializer: { output, request in
                switch output {
                case let .ok(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 200)
                    suppressMutabilityWarning(&response)
                    let body: OpenAPIRuntime.HTTPBody
                    switch value.body {
                    case let .json(value):
                        try converter.validateAcceptIfPresent(
                            "application/json",
                            in: request.headerFields
                        )
                        body = try converter.setResponseBodyAsJSON(
                            value,
                            headerFields: &response.headerFields,
                            contentType: "application/json; charset=utf-8"
                        )
                    }
                    return (response, body)
                case let .undocumented(statusCode, _):
                    return (.init(soar_statusCode: statusCode), nil)
                }
            }
        )
    }
    /// Retrieve an image manifest
    ///
    /// - Remark: HTTP `GET /{repository}/manifests/{reference}`.
    /// - Remark: Generated from `#/paths//{repository}/manifests/{reference}/get(getManifest)`.
    func getManifest(
        request: HTTPTypes.HTTPRequest,
        body: OpenAPIRuntime.HTTPBody?,
        metadata: OpenAPIRuntime.ServerRequestMetadata
    ) async throws -> (HTTPTypes.HTTPResponse, OpenAPIRuntime.HTTPBody?) {
        try await handle(
            request: request,
            requestBody: body,
            metadata: metadata,
            forOperation: Operations.getManifest.id,
            using: {
                APIHandler.getManifest($0)
            },
            deserializer: { request, requestBody, metadata in
                let path: Operations.getManifest.Input.Path = .init(
                    repository: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "repository",
                        as: Swift.String.self
                    ),
                    reference: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "reference",
                        as: Swift.String.self
                    )
                )
                let headers: Operations.getManifest.Input.Headers = .init(accept: try converter.extractAcceptHeaderIfPresent(in: request.headerFields))
                return Operations.getManifest.Input(
                    path: path,
                    headers: headers
                )
            },
            serializer: { output, request in
                switch output {
                case let .ok(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 200)
                    suppressMutabilityWarning(&response)
                    let body: OpenAPIRuntime.HTTPBody
                    switch value.body {
                    case let .application_vnd_period_docker_period_distribution_period_manifest_period_v2_plus_json(value):
                        try converter.validateAcceptIfPresent(
                            "application/vnd.docker.distribution.manifest.v2+json",
                            in: request.headerFields
                        )
                        body = try converter.setResponseBodyAsJSON(
                            value,
                            headerFields: &response.headerFields,
                            contentType: "application/vnd.docker.distribution.manifest.v2+json; charset=utf-8"
                        )
                    }
                    return (response, body)
                case let .notFound(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 404)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .undocumented(statusCode, _):
                    return (.init(soar_statusCode: statusCode), nil)
                }
            }
        )
    }
    /// Check if an image exists in the registry
    ///
    /// - Remark: HTTP `HEAD /{repository}/manifests/{reference}`.
    /// - Remark: Generated from `#/paths//{repository}/manifests/{reference}/head(existsImage)`.
    func existsImage(
        request: HTTPTypes.HTTPRequest,
        body: OpenAPIRuntime.HTTPBody?,
        metadata: OpenAPIRuntime.ServerRequestMetadata
    ) async throws -> (HTTPTypes.HTTPResponse, OpenAPIRuntime.HTTPBody?) {
        try await handle(
            request: request,
            requestBody: body,
            metadata: metadata,
            forOperation: Operations.existsImage.id,
            using: {
                APIHandler.existsImage($0)
            },
            deserializer: { request, requestBody, metadata in
                let path: Operations.existsImage.Input.Path = .init(
                    repository: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "repository",
                        as: Swift.String.self
                    ),
                    reference: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "reference",
                        as: Swift.String.self
                    )
                )
                return Operations.existsImage.Input(path: path)
            },
            serializer: { output, request in
                switch output {
                case let .ok(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 200)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .notFound(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 404)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .undocumented(statusCode, _):
                    return (.init(soar_statusCode: statusCode), nil)
                }
            }
        )
    }
    /// Retrieve a blob from an image
    ///
    /// - Remark: HTTP `GET /{repository}/blobs/{digest}`.
    /// - Remark: Generated from `#/paths//{repository}/blobs/{digest}/get(getBlob)`.
    func getBlob(
        request: HTTPTypes.HTTPRequest,
        body: OpenAPIRuntime.HTTPBody?,
        metadata: OpenAPIRuntime.ServerRequestMetadata
    ) async throws -> (HTTPTypes.HTTPResponse, OpenAPIRuntime.HTTPBody?) {
        try await handle(
            request: request,
            requestBody: body,
            metadata: metadata,
            forOperation: Operations.getBlob.id,
            using: {
                APIHandler.getBlob($0)
            },
            deserializer: { request, requestBody, metadata in
                let path: Operations.getBlob.Input.Path = .init(
                    repository: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "repository",
                        as: Swift.String.self
                    ),
                    digest: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "digest",
                        as: Swift.String.self
                    )
                )
                return Operations.getBlob.Input(path: path)
            },
            serializer: { output, request in
                switch output {
                case let .ok(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 200)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .notFound(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 404)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .undocumented(statusCode, _):
                    return (.init(soar_statusCode: statusCode), nil)
                }
            }
        )
    }
    /// Check if a blob exists in the registry
    ///
    /// - Remark: HTTP `HEAD /{repository}/blobs/{digest}`.
    /// - Remark: Generated from `#/paths//{repository}/blobs/{digest}/head(existsBlob)`.
    func existsBlob(
        request: HTTPTypes.HTTPRequest,
        body: OpenAPIRuntime.HTTPBody?,
        metadata: OpenAPIRuntime.ServerRequestMetadata
    ) async throws -> (HTTPTypes.HTTPResponse, OpenAPIRuntime.HTTPBody?) {
        try await handle(
            request: request,
            requestBody: body,
            metadata: metadata,
            forOperation: Operations.existsBlob.id,
            using: {
                APIHandler.existsBlob($0)
            },
            deserializer: { request, requestBody, metadata in
                let path: Operations.existsBlob.Input.Path = .init(
                    repository: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "repository",
                        as: Swift.String.self
                    ),
                    digest: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "digest",
                        as: Swift.String.self
                    )
                )
                return Operations.existsBlob.Input(path: path)
            },
            serializer: { output, request in
                switch output {
                case let .ok(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 200)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .notFound(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 404)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .undocumented(statusCode, _):
                    return (.init(soar_statusCode: statusCode), nil)
                }
            }
        )
    }
}
